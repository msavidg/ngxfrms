<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\envdte.dll" #>
<#@ Assembly Name="System.Data" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    if (string.IsNullOrEmpty(tableName))
    {
        tableName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    }
    string cleanTableName = tableName.Replace("ref_", string.Empty).Replace("Ref_", string.Empty);
    string path = Path.GetDirectoryName(Host.TemplateFile);
    if (string.IsNullOrEmpty(connectionString))
    {
        connectionString = "Data Source=ENIAC;Initial Catalog=FRMS_PRD;Integrated Security=True;";
    }

    // Get containing project
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
#>
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
 
namespace <#= project.Properties.Item("DefaultNamespace").Value #><#= Path.GetDirectoryName(Host.TemplateFile).Remove(0, Path.GetDirectoryName(project.FileName).Length).Replace("\\", ".") #>
{
    /// <summary>
    /// <#= tableName #> auto generated enumeration
    /// taken in part from http://erraticdev.blogspot.com/2011/01/generate-enum-of-database-lookup-table.html
    /// </summary>
    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public enum <#= "Enum" + cleanTableName #>
    {
<#
    SqlConnection conn = new SqlConnection(connectionString);
    if (string.IsNullOrEmpty(command))
    {
        command = string.Format("select {0}, {1}, {3} from [{4}].[{2}] {5} order by {0}", columnId, columnName, tableName, columnDescription, schema, whereclause);
    }
    SqlCommand comm = new SqlCommand(command, conn);
 
    conn.Open();
 
    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();
 
    while(loop)
    {
#>        /// <summary>
        /// <#= reader[columnName] #> configuration setting.
        /// </summary>
        [Description("<#= reader[columnDescription] #>")]
        <#= Pascalize(reader[columnName]) #> = <#= reader[columnId] #><# loop = reader.Read(); #><#= loop ? ",\r\n" : string.Empty #>
<#
    }
#>  }
}
<#+


    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:^|[^a-zA-Z]+)(?<first>[a-zA-Z])(?<reminder>[a-zA-Z0-9_]+)");
        var val = rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString());
        val =  val.Replace("&", "and").Replace(" ", string.Empty).Replace("/", string.Empty);
        return string.IsNullOrEmpty(val) ? "Unset" : val;
    }


#>
